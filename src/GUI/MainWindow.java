/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Exceptions.ParseCardsException;
import Model.Card;
import Model.Jugador;
import Model.Mano;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import static java.util.stream.Collectors.toList;
import javax.swing.ImageIcon;
import org.paukov.combinatorics3.Generator;

public class MainWindow extends javax.swing.JFrame {

    //private String mano;
    private String archivo;
    BufferedReader bf;

    public MainWindow() {
        initComponents();
        jButtonSiguiente.setVisible(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jButtonSiguiente = new javax.swing.JButton();
        jLabelManoActual = new javax.swing.JLabel();
        jTextManoActual = new javax.swing.JTextField();
        jLabelCarta2 = new javax.swing.JLabel();
        jLabelCarta3 = new javax.swing.JLabel();
        jLabelCarta4 = new javax.swing.JLabel();
        jLabelCarta5 = new javax.swing.JLabel();
        jLabelCarta1 = new javax.swing.JLabel();
        jLabelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonExit.setBackground(new java.awt.Color(0, 153, 51));
        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imágenes/exit.png"))); // NOI18N
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 20, 70, 60));

        jLabel2.setBackground(new java.awt.Color(0, 255, 204));
        jLabel2.setFont(new java.awt.Font("Gill Sans Ultra Bold Condensed", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 204));
        jLabel2.setText("EL POKERSITO");
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, 50));

        jLabel3.setBackground(new java.awt.Color(0, 51, 51));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Archivo de entrada:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 250, 40));

        jTextField1.setBackground(new java.awt.Color(204, 255, 204));
        jTextField1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 102, 102));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 370, 480, 40));

        jComboBox1.setBackground(new java.awt.Color(204, 255, 204));
        jComboBox1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(51, 51, 51));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.1", "1.2", "1.3", "1.4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 150, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imágenes/poker.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 550, 140));

        jScrollPane2.setAutoscrolls(true);

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(0, 102, 102));
        jTextArea2.setRows(5);
        jTextArea2.setAutoscrolls(false);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 580, 620, 160));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Salida:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 640, 150, 50));

        jButtonOk.setBackground(new java.awt.Color(255, 0, 51));
        jButtonOk.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        jButtonOk.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOk.setText("OK");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 450, 100, 70));

        jButtonSiguiente.setBackground(new java.awt.Color(255, 0, 51));
        jButtonSiguiente.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jButtonSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSiguiente.setText("SIGUIENTE");
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 580, 230, 70));

        jLabelManoActual.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelManoActual.setForeground(new java.awt.Color(255, 255, 255));
        jLabelManoActual.setText("Mano Actual:");
        getContentPane().add(jLabelManoActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 220, 50));

        jTextManoActual.setEditable(false);
        jTextManoActual.setBackground(new java.awt.Color(204, 255, 204));
        jTextManoActual.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jTextManoActual.setForeground(new java.awt.Color(0, 102, 102));
        jTextManoActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextManoActualActionPerformed(evt);
            }
        });
        getContentPane().add(jTextManoActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 480, 550, 40));

        jLabelCarta2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 204)));
        jLabelCarta2.setPreferredSize(new java.awt.Dimension(102, 147));
        getContentPane().add(jLabelCarta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, -1, -1));

        jLabelCarta3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 204)));
        jLabelCarta3.setPreferredSize(new java.awt.Dimension(102, 147));
        getContentPane().add(jLabelCarta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 190, -1, -1));

        jLabelCarta4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 204)));
        jLabelCarta4.setPreferredSize(new java.awt.Dimension(102, 147));
        getContentPane().add(jLabelCarta4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 190, -1, -1));

        jLabelCarta5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 204)));
        jLabelCarta5.setPreferredSize(new java.awt.Dimension(102, 147));
        getContentPane().add(jLabelCarta5, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 190, -1, -1));

        jLabelCarta1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 204)));
        jLabelCarta1.setPreferredSize(new java.awt.Dimension(102, 147));
        getContentPane().add(jLabelCarta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 190, -1, -1));

        jLabelFondo.setBackground(new java.awt.Color(0, 153, 0));
        jLabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imágenes/dark-green-wallpaper-hd.jpg"))); // NOI18N
        getContentPane().add(jLabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 1277, 773));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        //mano = jTextField1.getText();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        try {
            String dir = System.getProperty("user.dir") + "\\src\\resources\\";
            archivo = dir + jTextField1.getText();
            this.bf = new BufferedReader(new FileReader(archivo));
        } catch (FileNotFoundException ex) {
            jTextArea2.setText("No se ha encontrado el archivo");
        }
        if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.1")) {
            version11();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.2")) {
            version12();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.3")) {
            version13();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.4")) {
            version14();
        }
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguienteActionPerformed

        if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.1")) {
            version11();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.2")) {
            version12();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.3")) {
            version13();
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("1.4")) {
            version14();
        }
    }//GEN-LAST:event_jButtonSiguienteActionPerformed

    private void jTextManoActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextManoActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextManoActualActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonSiguiente;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelCarta1;
    private javax.swing.JLabel jLabelCarta2;
    private javax.swing.JLabel jLabelCarta3;
    private javax.swing.JLabel jLabelCarta4;
    private javax.swing.JLabel jLabelCarta5;
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JLabel jLabelManoActual;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextManoActual;
    // End of variables declaration//GEN-END:variables

    public void version11() {
        String cadena = "";
        try {
            if ((cadena = bf.readLine()) != null) {
                Mano m = new Mano(cadena);
                jTextManoActual.setText(m.toString());
                jTextArea2.setText("");
                jTextArea2.setText(m.comprobarMejorMano() + "(" + m.getMejorMano() + ") \n" + m.comprobarDrawColor() + m.comprobarDrawsEscalera());
                asignarImagen(m.getMejorMano()); 
                jButtonSiguiente.setVisible(true);
                jButtonOk.setEnabled(false);
            } else {
                vaciarCartas();
                jTextArea2.setText("No hay más manos para leer");
                jTextManoActual.setText("");
                jButtonOk.setEnabled(true);
                jButtonSiguiente.setVisible(false);
                bf.close();
                jTextField1.setText("");
            }

        } catch (FileNotFoundException ex) {
            jTextArea2.setText("No se ha encontrado el archivo");
        } catch (IOException ex) {
            jTextArea2.setText("Error en la entrada/salida");
        } catch (ParseCardsException pce) {
            jTextArea2.setText("Error en la lectura de cartas");
            jTextManoActual.setText(cadena);
        }

    }

    public void version12() {

        String cadena = "";
        try {
            if ((cadena = bf.readLine()) != null) {
                String[] aux = cadena.split(";");
                auxVersion12(aux[0] + aux[2], Integer.parseInt(aux[1]));

            } else {
                vaciarCartas();
                jTextArea2.setText("No hay más manos para leer");
                jTextManoActual.setText("");
                jButtonOk.setEnabled(true);
                jButtonSiguiente.setVisible(false);
                bf.close();
                jTextField1.setText("");
            }
        } catch (IOException ex) {
            jTextArea2.setText("Error en la entrada/salida");
        } catch (ParseCardsException pce) {
            jTextArea2.setText("Error en la lectura de cartas");
            jTextManoActual.setText(cadena);

        }
    }

    public void auxVersion12(String chain, int num) throws ParseCardsException {
        switch (num) {
            case 3: {
                Mano m = new Mano(chain);
                jTextManoActual.setText(m.toString());
                jTextArea2.setText("");
                jTextArea2.setText(m.comprobarMejorMano() + "(" + m.getMejorMano() + ") \n" + m.comprobarDrawColor() + m.comprobarDrawsEscalera());
                asignarImagen(m.getMejorMano());
                jButtonSiguiente.setVisible(true);
                jButtonOk.setEnabled(false);
                break;
            }
            case 4: {
                String[] auxi = new String[6];
                int tam = 0;

                for (int i = 0; i < 12; i = i + 2) {
                    auxi[tam] = chain.substring(i, i + 2);
                    tam++;
                }

                List<List<String>> combinations
                        = Generator.combination(auxi)
                                .simple(5)
                                .stream()
                                .collect(toList());

                Mano[] manos = new Mano[combinations.size()];

                for (int i = 0; i < combinations.size(); i++) {
                    String cadenaMano = "";
                    for (int j = 0; j < 5; j++) {
                        cadenaMano += combinations.get(i).get(j);
                    }
                    Mano m = new Mano(cadenaMano);
                    m.comprobarMejorMano();
                    manos[i] = m;
                }

                Mano mejorMano = ordenarManos(manos);
                jTextManoActual.setText(mejorMano.toString());
                jTextArea2.setText("");
                jTextArea2.setText(mejorMano.comprobarMejorMano() + "(" + mejorMano.getMejorMano() + ") \n"
                        + mejorMano.comprobarDrawColor() + mejorMano.comprobarDrawsEscalera());
                asignarImagen(mejorMano.getMejorMano());
                jButtonSiguiente.setVisible(true);
                jButtonOk.setEnabled(false);
                break;

            }
            case 5: {
                String[] auxi = new String[7];
                int tam = 0;

                for (int i = 0; i < 14; i = i + 2) {
                    auxi[tam] = chain.substring(i, i + 2);
                    tam++;
                }

                List<List<String>> combinations
                        = Generator.combination(auxi)
                                .simple(5)
                                .stream()
                                .collect(toList());

                Mano[] manos = new Mano[combinations.size()];

                for (int i = 0; i < combinations.size(); i++) {
                    String cadenaMano = "";
                    for (int j = 0; j < 5; j++) {
                        cadenaMano += combinations.get(i).get(j);
                    }
                    Mano m = new Mano(cadenaMano);
                    m.comprobarMejorMano();
                    manos[i] = m;
                }

                Mano mejorMano = ordenarManos(manos);
                jTextManoActual.setText(mejorMano.toString());
                jTextArea2.setText("");
                jTextArea2.setText(mejorMano.comprobarMejorMano() + "(" + mejorMano.getMejorMano() + ") \n");
                asignarImagen(mejorMano.getMejorMano());
                jButtonSiguiente.setVisible(true);
                jButtonOk.setEnabled(false);
                break;
            }
        }
    }

    public void version13() {
        String cadena = "";
        try {
            if ((cadena = bf.readLine()) != null) {
                String[] aux = cadena.split(";");
                auxVersion13(aux);

            } else {
                vaciarCartas();
                jTextArea2.setText("No hay más manos para leer");
                jTextManoActual.setText("");
                jButtonOk.setEnabled(true);
                jButtonSiguiente.setVisible(false);
                bf.close();
                jTextField1.setText("");
            }
        } catch (IOException ex) {
            jTextArea2.setText("Error en la entrada/salida");
        } catch (ParseCardsException pce) {
            jTextArea2.setText("Error en la lectura de cartas");
            jTextManoActual.setText(cadena);

        }

    }

    private void auxVersion13(String[] aux) throws ParseCardsException {
        Jugador[] jAux = new Jugador[Integer.parseInt(aux[0])];
        for (int i = 1; i < Integer.parseInt(aux[0]) + 1; i++) {
            String cadenaParcial = "";
            String[] jugMano = new String[2];
            jugMano[0] = aux[i].substring(0, 2);
            jugMano[1] = aux[i].substring(2, 6);
            Jugador j = new Jugador(jugMano[0], jugMano[1] + aux[aux.length - 1]);
            jAux[i - 1] = j;
        }

        for (int i = 0; i < jAux.length; i++) {
            String[] auxi = new String[7];
            int tam = 0;

            for (int j = 0; j < 14; j = j + 2) {
                auxi[tam] = jAux[i].getManoLarga().substring(j, j + 2);
                tam++;
            }

            List<List<String>> combinations
                    = Generator.combination(auxi)
                            .simple(5)
                            .stream()
                            .collect(toList());

            Mano[] manos = new Mano[combinations.size()];

            for (int j = 0; j < combinations.size(); j++) {
                String cadenaMano = "";
                for (int k = 0; k < 5; k++) {
                    cadenaMano += combinations.get(j).get(k);
                }
                Mano m = new Mano(cadenaMano);
                m.comprobarMejorMano();
                manos[j] = m;
            }

            jAux[i].setMejorMano(ordenarManos(manos));
        }

        ordenarJugadores(jAux);

        String cadenaFinal = "";
        for (Jugador j : jAux) {
            cadenaFinal += j.getNombre() + ": " + j.getMejorMano().getMejorMano() + " " + j.getMejorMano().comprobarMejorMano();
        }
        asignarImagen(jAux[0].getMejorMano().getMejorMano());
        jTextArea2.setText(cadenaFinal);
        jButtonSiguiente.setVisible(true);
        jButtonOk.setEnabled(false);

    }

    public void version14() {
        String cadena = "";
        try {
            if ((cadena = bf.readLine()) != null) {
                String[] aux = cadena.split(";");
                auxVersion14(aux);

            } else {
                vaciarCartas();
                jTextArea2.setText("No hay más manos para leer");
                jTextManoActual.setText("");
                jButtonOk.setEnabled(true);
                jButtonSiguiente.setVisible(false);
                bf.close();
                jTextField1.setText("");
            }
        } catch (IOException ex) {
            jTextArea2.setText("Error en la entrada/salida");
        } catch (ParseCardsException pce) {
            jTextArea2.setText("Error en la lectura de cartas");
            jTextManoActual.setText(cadena);

        }
    }

    public void auxVersion14(String[] aux) throws ParseCardsException {
        String[] auxi1 = new String[4];
        int tam = 0;
        for (int i = 0; i < 8; i = i + 2) {
            auxi1[tam] = aux[0].substring(i, i + 2);
            tam++;
        }
        List<List<String>> combinations1
                = Generator.combination(auxi1)
                        .simple(2)
                        .stream()
                        .collect(toList());
        String[] auxi2 = new String[Integer.parseInt(aux[1])];
        tam = 0;
        for (int i = 0; i < Integer.parseInt(aux[1]) * 2; i = i + 2) {
            auxi2[tam] = aux[2].substring(i, i + 2);
            tam++;
        }
        tam = 0;
        List<List<String>> combinations2
                = Generator.combination(auxi2)
                        .simple(3)
                        .stream()
                        .collect(toList());

        String cadenaMano = "";
        Mano[] manosaux = new Mano[1000];

        for (int i = 0; i < /*4*/6; i++) {
            for (int j = 0; j < /*Integer.parseInt(aux[1])*/combinations2.size(); j++) {
                for (int k = 0; k < 2; k++) {
                    cadenaMano += combinations1.get(i).get(k);
                }
                for (int k = 0; k < 3; k++) {
                    cadenaMano += combinations2.get(j).get(k);
                }
                Mano m = new Mano(cadenaMano);
                m.comprobarMejorMano();
                manosaux[tam] = m;
                tam++;
                cadenaMano = "";

            }
        }
        Mano[] manos = new Mano[tam];
        System.arraycopy(manosaux, 0, manos, 0, tam);
        Mano mejorMano = ordenarManos(manos);
        jTextManoActual.setText(mejorMano.toString());
        jTextArea2.setText("");
        jTextArea2.setText(mejorMano.comprobarMejorMano() + "(" + mejorMano.getMejorMano() + ") \n");
        asignarImagen(mejorMano.getMejorMano());
        jButtonSiguiente.setVisible(true);
        jButtonOk.setEnabled(false);
    }

    public void ordenarJugadores(Jugador[] aux) {
        Jugador auxi;
        for (int i = 0; i < aux.length - 1; i++) {
            for (int j = 0; j < aux.length - i - 1; j++) {
                if (aux[j + 1].getMejorMano().getValorMano() < aux[j].getMejorMano().getValorMano()) {
                    auxi = aux[j + 1];
                    aux[j + 1] = aux[j];
                    aux[j] = auxi;
                } else if (aux[j + 1].getMejorMano().getValorMano() == aux[j].getMejorMano().getValorMano()) {
                    if (aux[j + 1].getMejorMano().getValorCartasMano() > aux[j].getMejorMano().getValorCartasMano()) {
                        auxi = aux[j + 1];
                        aux[j + 1] = aux[j];
                        aux[j] = auxi;
                    }

                }
            }
        }
    }

    public Mano ordenarManos(Mano[] aux) {
        Mano auxi;

        for (int i = 0; i < aux.length - 1; i++) {
            for (int j = 0; j < aux.length - i - 1; j++) {
                if (aux[j + 1].getValorMano() < aux[j].getValorMano()) {
                    auxi = aux[j + 1];
                    aux[j + 1] = aux[j];
                    aux[j] = auxi;
                } else if (aux[j + 1].getValorMano() == aux[j].getValorMano()) {
                    if (aux[j + 1].getValorCartasMano() > aux[j].getValorCartasMano()) {
                        auxi = aux[j + 1];
                        aux[j + 1] = aux[j];
                        aux[j] = auxi;
                    }

                }
            }
        }

        return aux[0];
    }

    public void asignarImagen(String aux) throws ParseCardsException {

        vaciarCartas();

        Card[] v = new Card[5];
        int tam = 0;

        for (int i = 0; i < aux.length(); i = i + 2) {
            v[tam] = new Card(aux.substring(i, i + 2));
            tam++;
        }

        switch (tam) {
            case 5:
                jLabelCarta5.setIcon(new ImageIcon(v[4].getRutaRep()));
            case 4:
                jLabelCarta4.setIcon(new ImageIcon(v[3].getRutaRep()));
            case 3:
                jLabelCarta3.setIcon(new ImageIcon(v[2].getRutaRep()));
            case 2:
                jLabelCarta2.setIcon(new ImageIcon(v[1].getRutaRep()));
            case 1:
                jLabelCarta1.setIcon(new ImageIcon(v[0].getRutaRep()));

        }
    }

    public void vaciarCartas() {
        jLabelCarta5.setIcon(null);
        jLabelCarta4.setIcon(null);
        jLabelCarta3.setIcon(null);
        jLabelCarta2.setIcon(null);
        jLabelCarta1.setIcon(null);
    }
}
